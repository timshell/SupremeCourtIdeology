}
# now begin regression
tempFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = 2))
names(tempFrame) <- c("tiering", "age")
tempFrame$tiering <- dataFrame$tiering
tempFrame$tiering <- factor(tempFrame$tiering)
coefficients <- vector(,length(ageNames))
errors <- vector(,length(ageNames))
numInstances <- vector(,length(ageNames))
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
print(c(sum(tempFram"age"), errors[i]))
}
return (data.frame(coefficients, errors))
}
calcRegression <- function(dataFrame, indices) {
# figure out ages for extinction / origination
ages <- as.character(rawData$int_name)[indices]
# update dataframe for each age whether
for (i in 1:length(ageNames)) {
dataFrame[ageNames[i]] <- (ages == ageNames[i])*1
}
# now begin regression
tempFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = 2))
names(tempFrame) <- c("tiering", "age")
tempFrame$tiering <- dataFrame$tiering
tempFrame$tiering <- factor(tempFrame$tiering)
coefficients <- vector(,length(ageNames))
errors <- vector(,length(ageNames))
numInstances <- vector(,length(ageNames))
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
print(c(sum(tempFram"age"), errors[i]))
}
return (data.frame(coefficients, errors))
}
dataFrame <- extinctionFrame
indices <- extinctionIndices
ages <- as.character(rawData$int_name)[indices]
for (i in 1:length(ageNames)) {
dataFrame[ageNames[i]] <- (ages == ageNames[i])*1
}
tempFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = 2))
names(tempFrame) <- c("tiering", "age")
tempFrame$tiering <- dataFrame$tiering
tempFrame$tiering <- factor(tempFrame$tiering)
coefficients <- vector(,length(ageNames))
errors <- vector(,length(ageNames))
numInstances <- vector(,length(ageNames))
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
print(c(sum(tempFram"age"), errors[i]))
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
print(c(sum(tempFrame["age"]), errors[i]))
}
# define constants
PELAGIC = "pelagic"
NOT_PELAGIC = "benthic"
# read in raw data
rawData <- read.table("~/code/swat/swang/genera_per_stage.txt", sep="\t", header=T)
# find unique taxa
taxonNames <- as.character(unique(rawData$taxon_name))
taxonNames <- taxonNames[1:length(taxonNames)-1] # trim blank
taxonIndices <- match(taxonNames, as.character(rawData$taxon_name))
# find unique ages
ageNames <- as.character(unique(rawData$int_name))
ageNames <- ageNames[1:length(ageNames) - 1]  # trim blank
# sort ages
ageIndices <- match(ageNames, as.character(rawData$int_name))
ageMidpoints <- rawData$int_midpoint[ageIndices]
sortIndices <- sort(ageMidpoints, decreasing = TRUE, index.return = TRUE)$ix
ageMidpoints <- ageMidpoints[sortIndices]
ageNames <- ageNames[sortIndices]
# create base data frame
baseFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = length(ageNames) + 2))
names(baseFrame) <- c("taxon_name", "tiering", ageNames)
baseFrame[is.na(baseFrame)] <- 0
baseFrame["taxon_name"] <- taxonNames
tiering <- as.numeric(rawData$tiering)[taxonIndices]
tiering[rawData$tiering[taxonIndices] == 1] <- PELAGIC
tiering[rawData$tiering[taxonIndices] != 1] <- NOT_PELAGIC
baseFrame["tiering"] <- tiering
extinctionFrame <- baseFrame
originationFrame <- baseFrame
# calculate indices that give age for extinction and origination
extinctionIndices <- taxonIndices
originationIndices <- taxonIndices - 1
originationIndices <- c(originationIndices[2:length(originationIndices)],length(taxonIndices))
calcRegression <- function(dataFrame, indices) {
# figure out ages for extinction / origination
ages <- as.character(rawData$int_name)[indices]
# update dataframe for each age whether
for (i in 1:length(ageNames)) {
dataFrame[ageNames[i]] <- (ages == ageNames[i])*1
}
# now begin regression
tempFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = 2))
names(tempFrame) <- c("tiering", "age")
tempFrame$tiering <- dataFrame$tiering
tempFrame$tiering <- factor(tempFrame$tiering)
coefficients <- vector(,length(ageNames))
errors <- vector(,length(ageNames))
numInstances <- vector(,length(ageNames))
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
numInstances[i] <- sum(tempFrame["age"])
}
return (data.frame(coefficients, errors, numInstances))
}
results <- calcRegression(extinctionFrame, extinctionIndices)
coefficients <- results$coefficients
errors <- results$errors
numInstances <- results$numInstances
plot(ageMidpoints, coefficients,
xlab = "Age (million years ago)", ylab = "Log Odds",
type = "o", main = "Selectivity due to Extinction")
lines(ageMidpoints, coefficients+errors, col = "gray")
lines(ageMidpoints, coefficients-errors, col = "gray")
results <- calcRegression(originationFrame, originationIndices)
coefficients <- results$coefficients
errors <- results$errors
plot(ageMidpoints, coefficients,
xlab = "Age (million years ago)", ylab = "Log Odds",
type = "o", main = "Selectivity due to Origination")
lines(ageMidpoints, coefficients+errors, col = "gray")
lines(ageMidpoints, coefficients-errors, col = "gray")
numInstances
results <- calcRegression(originationFrame, originationIndices)
coefficients <- results$coefficients
errors <- results$errors
numInstances <- results$numInstances
plot(ageMidpoints, coefficients,
xlab = "Age (million years ago)", ylab = "Log Odds",
type = "o", main = "Selectivity due to Origination")
lines(ageMidpoints, coefficients+errors, col = "gray")
lines(ageMidpoints, coefficients-errors, col = "gray")
plot(numInstances, errors)
ptm <- proc.time()
# define constants
PELAGIC = "pelagic"
NOT_PELAGIC = "benthic"
ptm <- proc.time()
# read in raw data
rawData <- read.table("~/code/swat/swang/genera_per_stage.txt", sep="\t", header=T)
ptm <- proc.time()
# define constants
PELAGIC = "pelagic"
NOT_PELAGIC = "benthic"
proc.time() - ptm
# read in raw data
rawData <- read.table("~/code/swat/swang/genera_per_stage.txt", sep="\t", header=T)
proc.time() - ptm
# find unique taxa
taxonNames <- as.character(unique(rawData$taxon_name))
taxonNames <- taxonNames[1:length(taxonNames)-1] # trim blank
taxonIndices <- match(taxonNames, as.character(rawData$taxon_name))
# find unique ages
ageNames <- as.character(unique(rawData$int_name))
ageNames <- ageNames[1:length(ageNames) - 1]  # trim blank
# sort ages
ageIndices <- match(ageNames, as.character(rawData$int_name))
ageMidpoints <- rawData$int_midpoint[ageIndices]
sortIndices <- sort(ageMidpoints, decreasing = TRUE, index.return = TRUE)$ix
ageMidpoints <- ageMidpoints[sortIndices]
ageNames <- ageNames[sortIndices]
# create base data frame
baseFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = length(ageNames) + 2))
names(baseFrame) <- c("taxon_name", "tiering", ageNames)
baseFrame[is.na(baseFrame)] <- 0
baseFrame["taxon_name"] <- taxonNames
tiering <- as.numeric(rawData$tiering)[taxonIndices]
tiering[rawData$tiering[taxonIndices] == 1] <- PELAGIC
tiering[rawData$tiering[taxonIndices] != 1] <- NOT_PELAGIC
baseFrame["tiering"] <- tiering
extinctionFrame <- baseFrame
originationFrame <- baseFrame
# calculate indices that give age for extinction and origination
extinctionIndices <- taxonIndices
originationIndices <- taxonIndices - 1
originationIndices <- c(originationIndices[2:length(originationIndices)],length(taxonIndices))
calcRegression <- function(dataFrame, indices) {
# figure out ages for extinction / origination
ages <- as.character(rawData$int_name)[indices]
# update dataframe for each age whether
for (i in 1:length(ageNames)) {
dataFrame[ageNames[i]] <- (ages == ageNames[i])*1
}
# now begin regression
tempFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = 2))
names(tempFrame) <- c("tiering", "age")
tempFrame$tiering <- dataFrame$tiering
tempFrame$tiering <- factor(tempFrame$tiering)
coefficients <- vector(,length(ageNames))
errors <- vector(,length(ageNames))
numInstances <- vector(,length(ageNames))
proc.time() - ptm
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
numInstances[i] <- sum(tempFrame["age"])
}
proc.time() - ptm
return (data.frame(coefficients, errors, numInstances))
}
results <- calcRegression(extinctionFrame, extinctionIndices)
coefficients <- results$coefficients
errors <- results$errors
numInstances <- results$numInstances
plot(ageMidpoints, coefficients,
xlab = "Age (million years ago)", ylab = "Log Odds",
type = "o", main = "Selectivity due to Extinction")
lines(ageMidpoints, coefficients+errors, col = "gray")
lines(ageMidpoints, coefficients-errors, col = "gray")
results <- calcRegression(originationFrame, originationIndices)
coefficients <- results$coefficients
errors <- results$errors
numInstances <- results$numInstances
plot(ageMidpoints, coefficients,
xlab = "Age (million years ago)", ylab = "Log Odds",
type = "o", main = "Selectivity due to Origination")
lines(ageMidpoints, coefficients+errors, col = "gray")
lines(ageMidpoints, coefficients-errors, col = "gray")
proc.time() - ptm
print("starting", ptm <- proc.time())
print("starting", ptm <- proc.time())
print("starting", ptm <- proc.time())
# define constants
PELAGIC = "pelagic"
NOT_PELAGIC = "benthic"
proc.time() - ptm
# read in raw data
rawData <- read.table("~/code/swat/swang/genera_per_stage.txt", sep="\t", header=T)
# read in raw data
print("starting", 5)
print(5)
print(c("starting", 5)
)
print(c("starting", ptm <- proc.time()))
proc.time()
proc.time()[3]
unname(proc.time()[3])
proc.time()$elapsed
proc.time()["elapse"]
proc.time()["elapsed"]
print(c("starting", unname(ptm <- proc.time())["elapsed"])
)
print(c("starting", unname(ptm <- proc.time()["elapsed"])))
print(c("beginning reading raw data", unname((proc.time() - ptm)["elapsed"])))
ptm
proc.time()
print(c("beginning reading raw data", unname((proc.time() - ptm)["elapsed"])))
# Mayank Agrawal
#
# Analysis script to figure out whether extinction/origination
# is selective due to a taxon being pelagic/benthic
# define constants
PELAGIC = "pelagic"
NOT_PELAGIC = "benthic"
# timer
ptm <- proc.time()
# read in raw data
start<- unname((proc.time() - ptm)["elapsed"])
rawData <- read.table("~/code/swat/swang/genera_per_stage.txt", sep="\t", header=T)
print(c("reading raw data:", unname((proc.time() - ptm)["elapsed"]) - start))
# find unique taxa
taxonNames <- as.character(unique(rawData$taxon_name))
taxonNames <- taxonNames[1:length(taxonNames)-1] # trim blank
taxonIndices <- match(taxonNames, as.character(rawData$taxon_name))
# find unique ages
ageNames <- as.character(unique(rawData$int_name))
ageNames <- ageNames[1:length(ageNames) - 1]  # trim blank
# sort ages
ageIndices <- match(ageNames, as.character(rawData$int_name))
ageMidpoints <- rawData$int_midpoint[ageIndices]
sortIndices <- sort(ageMidpoints, decreasing = TRUE, index.return = TRUE)$ix
ageMidpoints <- ageMidpoints[sortIndices]
ageNames <- ageNames[sortIndices]
# create base data frame
baseFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = length(ageNames) + 2))
names(baseFrame) <- c("taxon_name", "tiering", ageNames)
baseFrame[is.na(baseFrame)] <- 0
baseFrame["taxon_name"] <- taxonNames
tiering <- as.numeric(rawData$tiering)[taxonIndices]
tiering[rawData$tiering[taxonIndices] == 1] <- PELAGIC
tiering[rawData$tiering[taxonIndices] != 1] <- NOT_PELAGIC
baseFrame["tiering"] <- tiering
extinctionFrame <- baseFrame
originationFrame <- baseFrame
# calculate indices that give age for extinction and origination
extinctionIndices <- taxonIndices
originationIndices <- taxonIndices - 1
originationIndices <- c(originationIndices[2:length(originationIndices)],length(taxonIndices))
dataFrame <- extinctionFrame
indices <- extinctionIndices
# figure out ages for extinction / origination
ages <- as.character(rawData$int_name)[indices]
# update dataframe for each age whether
for (i in 1:length(ageNames)) {
dataFrame[ageNames[i]] <- (ages == ageNames[i])*1
}
# now begin regression
tempFrame <- data.frame(matrix(, nrow = length(taxonNames), ncol = 2))
names(tempFrame) <- c("tiering", "age")
tempFrame$tiering <- dataFrame$tiering
tempFrame$tiering <- factor(tempFrame$tiering)
coefficients <- vector(,length(ageNames))
errors <- vector(,length(ageNames))
numInstances <- vector(,length(ageNames))
start <- unname((proc.time() - ptm)["elapsed"])
for (i in 1:length(ageNames)) {
tempFrame["age"] <- dataFrame[ageNames[i]]
logisticRegression <- glm(age ~ tiering, data = tempFrame, family = "binomial")
coefficients[i] <- summary(logisticRegression)$coefficients[2]
errors[i] <- summary(logisticRegression)$coefficients[4]
numInstances[i] <- sum(tempFrame["age"])
}
View(data.frame(ageNames, ageMidpoints, coefficients, errors, numInstances))
import(xlsx)
usepackage
use
data <- read.table("test.xslx")
data <- read.table("test.xlsx")
data <- read.table("test.xlsx")
data <- read.table("~/Desktop/test.xlsx")
data <- read.table("~/Desktop/test.csv")
data <- read.table("~/Desktop/test.txt")
data <- read.table("~/Desktop/test.txt")
data <- read.table("~/Desktop/test.txt")
data <- read.table("~/Desktop/test.txt")
View(data)
data <- read.table("~/Desktop/test.txt", header = T)
View(data)
plot(data$data, data$Miles)
plot(data$Date, data$Miles)
plot(data$Date, data$Miles, line = "o")
plot(data$Date, data$Miles, type = "o")
data <- read.table("test.txt", header = T)
pwd
data <- read.table("test.txt", header = T)
data <- read.table("data.txt", header = T)
data <- read.table("data.txt", header = T)
ls
cd code
setwd
setwd("code/github/dataFromBlog/mileage")
data <- read.table("data.txt", header = T)
View(data)
plot(data$Date, data$mileage, header = T)
plot(data$Date, data$mileage)
plot(data$Date, data$Miles)
plot(data$Date, data$Miles, type = "o")
plot(data$Date, data$Miles, type="o")
plot(data$Date, data$Miles, type="k")
data$Date
data["date"]
data["Date"]
foo <- data["Date"]
foo <- as.vector(data["Date"])
foo
foo <- as.vector(data$Date)
foo
plot(as.vector(data$Date), as.vector(data$Miles),
xlab = "Date", ylab = "Miles",
type = "o", main = "Mileage in College")
plot(as.vector(data$Date), as.vector(data$Miles))
dates <- as.vector(data$Date)
dates
plot(dates, miles)
miles <- as.vector(data$Miles)
plot(dates, miles)
plot(miles)
plot(dates, miles, ylab = "Miles",
type = "o", line = "l" main = "Mileage in College")
plot(dates, miles, ylab = "Miles",
type = "o", line = "l", main = "Mileage in College")
plot(miles, ylab = "Miles",
type = "o", main = "Mileage in College")
plot(miles, ylab = "Miles",
type = ".", main = "Mileage in College")
plot(miles, ylab = "Miles", main = "Mileage in College")
plot(miles, xlab = "", ylab = "Miles", main = "Mileage in College")
plot(miles, xlab = "", ylab = "Miles", col = "gray", main = "Mileage in College")
good <- as.vector(data$Feeling) == "Good"
bad <- as.vector(data$Feeling) == "Bad"
meh <- as.vector(data$Feeling) == "Meh"
plot(miles, xlab = "", ylab = "Miles", col = "black", main = "Mileage in College")
points(miles[bad], col = "red")
plot(miles, xlab = "", ylab = "Miles", col = "black",type = "n", main = "Mileage in College")
points(miles[bad], col = "red")
plot(miles, xlab = "", ylab = "Miles", type = "n", main = "Mileage in College")
lines(miles)
points(miles[bad], col = "red")
points(miles[bad], pch = "16", col = "red")
points(miles[bad], pch = "16", col = "red", bg = "red")
points(miles[bad], col = "red", bg = "red")
plot(miles, xlab = "", ylab = "Miles", type = "n", main = "Mileage in College")
lines(miles)
points(miles[bad], col = "red", bg = "red")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles)
points(miles[bad], col="red", bg="red")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles)
points(miles[bad], pch = 21, col="red", bg="red")
points(bad, miles[bad], pch = 21, col="red", bg="red")
bad
miles[bad]
length(miles[bad])
length(bad)
length(miles)
feelings <- as.vector(data$Feeling)
feelings[is.nan(feelings)] = ""
good <- feelings == "Good"
bad <- feelings == "Bad"
meh <- feelings == "Meh"
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles)
points(bad, miles[bad], pch = 21, col="red", bg="red")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles)
points(miles[bad], pch = 21, col="red", bg="red")
lines(miles, type = "o")
points(miles[bad], pch = 21, col="red", bg="red", cex = 5)
points(miles[bad], pch = 21, col="red", bg="red", cex = .5)
points(miles[bad], pch = 21, col="red", bg="red", cex = .5)
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles, type = "o")
points(miles[bad], pch = 21, col="red", bg="red", cex = .5)
maText(miles[bad])
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles, type = "o")
points(miles[bad], pch = 21, col="red", bg="red")
miles
miles[bad]
data <- read.table("data.txt", header = T)
miles <- as.vector(data$Miles)
feelings <- as.vector(data$Feeling)
feelings[is.nan(feelings)] = 0
good <- feelings == "Good"
bad <- feelings == "Bad"
meh <- feelings == "Meh"
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles, type = "o")
points(miles[bad], pch = 21, col="red", bg="red")
miles[bad]
miles
feelings
bad
miles[bad]
foo <- false
False
foo <- FALSE
bad[bad == FALSE] <- NA
bad
points(miles[bad], pch = 21, col="red", bg="red")
data <- read.table("data.txt", header = T)
miles <- as.vector(data$Miles)
feelings <- as.vector(data$Feeling)
#feelings[is.nan(feelings)] = 0
good <- feelings == "Good"]
bad <- feelings == "Bad"
meh <- feelings == "Meh"
good[good == FALSE] <- NA
bad[bad == FALSE] <- NA
meh[meh == FALSE] <- NA
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles, type = "o")
points(miles[bad], pch = 21, col="red", bg="red")
points(miles[bad], pch = 21, col="red", bg="red")
points(miles[good], pch = 21, col="green", bg="green")
points(miles[meh], pch = 21, col="yellow", bg="yellow")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College")
lines(miles)
points(miles[bad], pch = 21, col="red", bg="red")
points(miles[good], pch = 21, col="green", bg="green")
points(miles[meh], pch = 21, col="yellow", bg="yellow")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College", ylim = c(0,90))
lines(miles)
points(miles[bad], pch = 21, col="red", bg="red")
points(miles[good], pch = 21, col="green", bg="green")
points(miles[meh], pch = 21, col="yellow", bg="yellow")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College", ylim = c(5,90))
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College", ylim = range(0:85))
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College", ylim = range(0:85))
lines(miles)
points(miles[bad], pch = 21, col="red", bg="red")
points(miles[good], pch = 21, col="green", bg="green")
points(miles[meh], pch = 21, col="yellow", bg="yellow")
plot(miles, xlab="", ylab="Miles", type="n", main="Mileage in College", xaxt='n',
yaxs="i", ylim = range(0:85))
lines(miles)
points(miles[bad], pch = 21, col="red", bg="red")
points(miles[good], pch = 21, col="green", bg="green")
points(miles[meh], pch = 21, col="yellow", bg="yellow")
